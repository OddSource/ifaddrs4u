# The JVM does not seem to garbage collect initialized jclasses, jmethodIDs, or jfieldIDs, so no matter what
# code calls it or wherever, it will always trigger LSAN.
leak:^jni_GetMethodID
leak:^jni_GetFieldID
leak:^jni_GetStaticMethodID
leak:^jni_GetStaticFieldID
leak:^jni_FindClass

# These leaks are in the JVM itself, not our code
leak:^JavaCalls::call_helper
leak:^Compiler::
leak:^InterpreterRuntime::_new
leak:^GraphBuilder::
leak:^SystemDictionary::resolve_instance_class_or_null
leak:^JNI_CreateJavaVM
leak:^G1RootProcessor::
leak:^CompileBroker::
leak:^CompilationPolicy::
leak:^Java_java_util_zip_Inflater
leak:^SharedRuntime::handle_wrong_method_ic_miss
leak:^SharedRuntime::resolve_virtual_call_C
leak:^JLI_Launch
leak:^Unsafe_AllocateMemory0
leak:^JVM_AddModuleExports
leak:^WatcherThread::run
leak:^JVM_NewInstanceFromConstructor
leak:^exception_handler_for_pc_helper
